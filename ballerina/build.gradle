// Copyright (c) 2023 WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv('packageUser')
                password System.getenv('packagePAT')
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina Persist - SQL Extension'

def packageName = 'persist.sql'
def packageOrg = 'ballerinax'
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")

def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")


def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
    testCoverageParam = "--code-coverage --coverage-format=xml --includes=*"
}

dependencies {
    externalJars(group: 'io.ballerina.stdlib', name: 'persist-native', version: "${stdlibPersistVersion}") {
        transitive = false
    }
    externalJars(group: 'io.ballerina.stdlib', name: 'persist-compiler-plugin', version: "${stdlibPersistVersion}") {
        transitive = false
    }
    externalJars(group: 'io.ballerina.stdlib', name: 'sql-native', version: "${stdlibSqlVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentPersistVersion = stripBallerinaExtensionVersion(project.stdlibPersistVersion)

        def newConfig = ballerinaTomlFilePlaceHolder.text.replace('@project.version@', project.version.toString())
        newConfig = newConfig.replace('@toml.version@', tomlVersion)
        newConfig = newConfig.replace('@persist.version@', stdlibDependentPersistVersion)
        newConfig = newConfig.replace('@persist.native.version@', project.stdlibPersistVersion)
        newConfig = newConfig.replace('@sql.native.version@', project.stdlibSqlVersion)
        ballerinaTomlFile.text = newConfig

        def newCompilerPluginToml = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newCompilerPluginToml = newCompilerPluginToml.replace('@persist.native.version@', project.stdlibPersistVersion)
        newCompilerPluginToml = newCompilerPluginToml.replace('@sql.native.version@', project.stdlibPersistVersion)
        compilerPluginTomlFile.text = newCompilerPluginToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update native jar versions in toml files\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m \"[Automated] Update native jar versions in toml files\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv('publishUser')
                password = System.getenv('publishPAT')
            }
        }
    }
}

static def checkExecResult(executionResult, failText, standardOutput) {
    if (executionResult != null) {
        Provider<ExecResult> execResultProvider = executionResult.getProvider()
        int exitCode = execResultProvider.get().getExitValue()
        if (exitCode != 0) {
            throw new GradleException('Non-zero exit value: ' + exitCode)
        }
        if (standardOutput.toString().contains(failText)) {
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

task createMySQLTestDockerImage(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker build --platform linux/amd64 -f $project.projectDir/tests/resources/mysql/Dockerfile -t ballerina-persist-mysql" +
                " -q $project.projectDir/tests/resources/mysql/"
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            sleep(10 * 1000)
        }
    }
}

def checkMySQLTestDockerContainerStatus(dockerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c',
                        "docker exec ${dockerName} mysqladmin ping -hlocalhost -uroot -pTest123# --silent"
            }.exitValue
        } catch (all) {
            return 1
        }
    }
}

task startMySQLTestDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', 'docker run --rm -d --name ballerina-persist-mysql -p 3305:3306 -t ballerina-persist-mysql'
        def healthCheck = 1
        def counter = 0
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkMySQLTestDockerContainerStatus('ballerina-persist-mysql')
                counter = counter + 1
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container 'ballerina-persist-mysql' health test exceeded timeout!")
            }
        }
    }
}

task stopMySQLTestDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', 'docker stop ballerina-persist-mysql'
                    standardOutput = stdOut
                }
            } catch (all) {
                println('Gradle process can safely ignore stopMySQLTestDockerContainer task')
            }
        }
    }
}

task createMSSQLTestDockerImage(type: Exec) {
   if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
       def standardOutput = new ByteArrayOutputStream()
       commandLine 'sh', '-c', "docker build -f $project.projectDir/tests/resources/mssql/Dockerfile -t ballerina-persist-mssql -q $project.projectDir/tests/resources/mssql/"
       doLast {
           checkExecResult(executionResult, 'Error', standardOutput)
           sleep(10 * 1000)
       }
   }
}

def checkMSSQLTestDockerContainerStatus(containerName) {
   if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
       try {
           return exec {
               commandLine 'sh', '-c',
                       "docker exec ${containerName} /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P Test123#"
           }.exitValue
       } catch (all) {
           return 1;
       }
   }
}

task startMSSQLTestDockerContainer(type: Exec) {
   if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
       def standardOutput = new ByteArrayOutputStream()
       commandLine 'sh', '-c',
               "docker run --rm -d --name ballerina-persist-mssql -e ACCEPT_EULA=1 -e SA_PASSWORD=Test123# -p 1433:1433 -d ballerina-persist-mssql"
       def healthCheck = 1;
       def counter = 0;
       doLast {
           checkExecResult(executionResult, 'Error', standardOutput)
           while (healthCheck != 0 && counter < 12) {
               sleep(5 * 1000)
               healthCheck = checkMSSQLTestDockerContainerStatus("ballerina-persist-mssql")
               counter = counter + 1;
           }
           if (healthCheck != 0) {
               throw new GradleException("Docker container 'ballerina-persist-mssql' health test exceeded timeout!")
           }
       }
   }
}

task stopMSSQLTestDockerContainer() {
   doLast {
       if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
           try {
               def stdOut = new ByteArrayOutputStream()
               exec {
                   commandLine 'sh', '-c', "docker stop ballerina-persist-mssql"
                   standardOutput = stdOut
               }
           } catch (all) {
               println("Process can safely ignore stopTestDockerContainer task")
           }
       }
   }
}

task createPostgreSQLTestDockerImage(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker build -f ${project.projectDir}/tests/resources/postgresql/Dockerfile -t ballerina-persist-postgresql" +
                " -q ${project.projectDir}/tests/resources/postgresql"
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            sleep(10 * 1000)
        }
    }
}

def checkPostgreSQLTestDockerContainerStatus(containerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c', "docker exec ${containerName} psql -U postgres -h localhost -p 5432"
            }.exitValue
        } catch (all) {
            return 1;
        }
    }
}

task startPostgreSQLTestDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c',
                "docker run --rm -d --name ballerina-persist-postgresql -p 5432:5432 -d ballerina-persist-postgresql"
        def healthCheck = 1;
        def counter = 0;
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkPostgreSQLTestDockerContainerStatus("ballerina-persist-postgresql")
                counter = counter + 1;
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container 'ballerina-persist-postgresql' health test exceeded timeout!")
            }
        }
    }
}

task stopPostgreSQLTestDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', "docker stop ballerina-persist-postgresql"
                    standardOutput = stdOut
                }
            } catch (all) {
                println("Process can safely ignore stopPostgreSQLTestDockerContainer task")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs
startMySQLTestDockerContainer.dependsOn createMySQLTestDockerImage
startMSSQLTestDockerContainer.dependsOn createMSSQLTestDockerImage
startPostgreSQLTestDockerContainer.dependsOn createPostgreSQLTestDockerImage

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-compiler-plugin:build"
build.dependsOn ":${packageName}-native:build"
build.finalizedBy stopMySQLTestDockerContainer
build.finalizedBy stopMSSQLTestDockerContainer
build.finalizedBy stopPostgreSQLTestDockerContainer

test.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn ":${packageName}-native:build"
test.dependsOn startMySQLTestDockerContainer
test.dependsOn startMSSQLTestDockerContainer
test.dependsOn startPostgreSQLTestDockerContainer
