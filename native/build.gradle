// Copyright (c) 2023 WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

plugins {
    id 'java'
    id 'com.github.spotbugs'
    id 'checkstyle'
    id 'jacoco'
    id 'maven-publish'
}

description = 'Ballerina Persist - SQL Extension Java Native'

configurations {
    jacocoRuntime
}

dependencies {
    jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"

    checkstyle project(":checkstyle")
    checkstyle "com.puppycrawl.tools:checkstyle:${puppycrawlCheckstyleVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation group: 'io.ballerina.stdlib', name: 'sql-native', version: "${stdlibSqlVersion}"
    implementation group: 'io.ballerina.stdlib', name: 'persist-native', version: "${stdlibPersistVersion}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = JavaVersion.VERSION_17

test {
    testLogging {
        showStackTraces = true
        showStandardStreams = true
        events "failed"
        exceptionFormat "full"
    }
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/coverage-reports/jacoco.exec")
        includeNoLocationClasses = true
    }
}

spotbugsMain {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("${rootDir}/build-config/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        text.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

checkstyle {
    toolVersion "${checkstyleToolVersion}"
    configFile file("${rootDir}/build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile": file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

spotbugsMain.finalizedBy validateSpotbugs
checkstyleMain.dependsOn ':checkstyle:downloadCheckstyleRuleFiles'
checkstyleTest.dependsOn ':checkstyle:downloadCheckstyleRuleFiles'

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId "persist.sql-native"
            version = project.version
            artifact jar
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerinax-persist.sql")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
        maven {
            name = "WSO2Nexus"
            if(project.version.endsWith('-SNAPSHOT')) {
                url "https://maven.wso2.org/nexus/content/repositories/snapshots/"
            } else {
                url "https://maven.wso2.org/nexus/service/local/staging/deploy/maven2/"
            }
            credentials {
                username System.getenv("nexusUser")
                password System.getenv("nexusPassword")
            }
        }
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
